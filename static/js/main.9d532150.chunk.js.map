{"version":3,"sources":["components/Form.js","components/Hours.js","components/Day.js","components/Forecast.js","components/Weather.js","services/useSyncFetch.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","setIdCity","data","useState","cityName","setCityName","className","htmlFor","onChange","e","target","value","type","name","id","onClick","preventDefault","Locations","Location","forEach","city","toLowerCase","console","log","Hours","hour","hours","map","element","temperature","wind","visibility","UV","time","pop","V","U","T","$","S","Pp","Day","days","date","hourlyForecast","dayDate","slice","forecastForHour","key","Forecast","location","Period","country","Rep","Weather","idCity","url","apiKey","setLocation","isLoading","setIsLoading","useEffect","fetch","then","response","json","SiteRep","DV","useSyncFetch","setData","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9d532150.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst Form = ({setIdCity, data}) => {\r\n\r\n    const [cityName, setCityName] = useState('');\r\n    \r\n    const findId = (e) =>{\r\n        const cities = data.Locations.Location;\r\n        cities.forEach(city => {\r\n        const userInput = cityName.toLowerCase();\r\n        const dataCitiesName = city.name.toLowerCase();\r\n\r\n            if(userInput === dataCitiesName){\r\n                console.log(city.name, city.id)\r\n                return setIdCity(city.id)\r\n            }\r\n        });\r\n    }\r\n\r\n    const handleClick = (e) => {\r\n        e.preventDefault();\r\n        findId();\r\n    }\r\n\r\n    const handleChange = e => {\r\n        setCityName(e.target.value)\r\n    }\r\n    \r\n    return (\r\n        <form className=\"form\">\r\n            <label htmlFor=\"location\">Location: </label>\r\n            <input \r\n            onChange={handleChange} \r\n            type=\"text\" \r\n            name=\"location\" \r\n            id=\"location\" />\r\n            <button onClick={handleClick}>Check</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;\r\n","import React, { useState } from 'react';\r\n\r\nconst Hours = ({ hours }) => {\r\n\r\n\r\n    const hour = hours.map(element => {\r\n        let temperature;\r\n        let wind;\r\n        let visibility;\r\n        let UV;\r\n        let time;\r\n        let pop;\r\n\r\n        switch (element.V) {\r\n            case \"VP\":\r\n                visibility = \"Very poor - less than 1 km \"\r\n                break;\r\n            case \"PO\":\r\n                visibility = \"Poor - Between 1-4 km \"\r\n                break;\r\n            case \"MO\":\r\n                visibility = \"Moderate - Between 4-10 km\"\r\n                break;\r\n            case \"GO\":\r\n                visibility = \"Good - Between 10-20 km\"\r\n                break;\r\n            case \"VG\":\r\n                visibility = \"Very good - Between 20-40 km\"\r\n                break;\r\n            case \"EX\":\r\n                visibility = \"Excellent - More than 40 km\"\r\n                break;\r\n\r\n            default:\r\n                visibility = \"Unknown\"\r\n                break;\r\n        }\r\n        if (element.U <= 2) {\r\n            UV = \"Low exposure. No protection required. You can safely stay outside\"\r\n        } else if (element.U > 2 && element.U < 5) {\r\n            UV = \"Moderate exposure. Seek shade during midday hours, cover up and wear sunscreen\"\r\n        } else if (element.U === 6 || element.U === 7) {\r\n            UV = \"High exposure. Seek shade during midday hours, cover up and wear sunscreen\"\r\n        } else if (element.U >= 8 && element.U < 11) {\r\n            UV = \"Very high. Avoid being outside during midday hours. Shirt, sunscreen and hat are essential\"\r\n        } else {\r\n            UV = \"Extreme. Avoid being outside during midday hours. Shirt, sunscreen and hat essential.\"\r\n        }\r\n\r\n        temperature = element.T;\r\n        time = element.$ / 60;\r\n        wind = element.S;\r\n        pop = element.Pp;\r\n\r\n        return (\r\n            <div className=\"forecast__hour\">\r\n                <p className=\"forecast__data\">Time {time < 10 ? \"0\" + time + \":00\" : time + \":00\"}</p>\r\n                <p className=\"forecast__data\">Temperature: {temperature} Celcius</p>\r\n                <p className=\"forecast__data\">Wind: {wind} mph</p>\r\n                <p className=\"forecast__data\">Visibility: {visibility}</p>\r\n                <p className=\"forecast__data\">Max UV index: {UV}</p>\r\n                <p className=\"forecast__data\">Precipitation Probability: {pop} %</p>\r\n            ----------------------------------------------\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <>\r\n        { hour }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Hours;","import React from 'react';\r\nimport Hours from './Hours'\r\n\r\nconst Day = ({ days, date, hourlyForecast }) => {\r\n\r\n    const dayDate = date.slice(0, 10);\r\n    const forecastForHour = hourlyForecast.map(element => (\r\n        <Hours\r\n         key={element.$}\r\n         hours={hourlyForecast}\r\n         />\r\n    ))\r\n    return (\r\n        <div className=\"forecast__day\">\r\n            <p className=\"forecast__date\">{dayDate}</p>\r\n            {forecastForHour}\r\n            {/* {console.log(hourlyForecast, \"Hours\")} */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Day;","import React from 'react';\r\nimport Day from './Day';\r\nconst Forecast = ({location}) => {\r\n\r\n    const days = location.Period\r\n\r\n    return ( \r\n        <div className=\"forecast\">\r\n        <p className=\"forecast__location\">{location.name}</p>\r\n        <p className=\"forecast__location\">{location.country}</p>\r\n        {days.map(element => (\r\n            <Day \r\n            key={element.value}\r\n            days={days}\r\n            hourlyForecast={element.Rep}\r\n            date={element.value}\r\n            />\r\n        ))}\r\n        {/* {console.log(days, \"Days\")} */}\r\n    </div>\r\n     );\r\n}\r\n \r\nexport default Forecast;","import React, { useState, useEffect } from 'react';\r\nimport Forecast from './Forecast';\r\n\r\nconst Weather = ({ idCity, url, apiKey }) => {\r\n\r\n    const [location, setLocation] = useState({});\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        fetch(url + `/${idCity}?res=3hourly&` + apiKey)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setLocation(data.SiteRep.DV.Location);\r\n                setIsLoading(false)\r\n            })\r\n    }, [apiKey, idCity, url])\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <h2 className=\"weather__h2\">Please write location and click check</h2>\r\n        )\r\n    } else {\r\n        return (\r\n            <Forecast \r\n            location={location}\r\n            \r\n            />\r\n        )\r\n    }\r\n}\r\n// //Bug is with rerender should be days.map(element => {\r\n//     element.Rep.map(day => )\r\n// }) \r\n\r\nexport default Weather;","import { useState, useEffect } from 'react';\r\n\r\nconst useSyncFetch = (url) => {\r\n\r\n    const [data, setData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetch(url)\r\n        .then(response => response.json())\r\n        .then(data => setData(data));\r\n    }, [url]) \r\n\r\n    return data;\r\n}\r\n \r\nexport default useSyncFetch;","import React, { useState } from 'react';\nimport Form from './Form';\nimport Weather from './Weather';\nimport useSyncFetch from '../services/useSyncFetch';\nimport '../css/index.css'\n\nconst App = () => {\n  const url = \"http://datapoint.metoffice.gov.uk/public/data/val/wxfcs/all/json\";\n  const key = \"key=1289106d-5a64-4c12-92af-cbc243501aa9\";\n  const [idCity, setIdCity] = useState();\n\n  const data = useSyncFetch(url + \"/sitelist?\" + key);\n  console.log(data)\n  return (\n    <div className=\"wrapper\">\n      <Form\n        className=\"form\"\n        setIdCity={setIdCity}\n        data={data}\n      />\n      <Weather\n        className=\"weather\"\n        idCity={idCity}\n        url={url}\n        apiKey={key}\n      />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}